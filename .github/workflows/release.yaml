name: Release Action

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      update_major:
        description: 'Update major version tag (e.g., v1)'
        required: false
        type: boolean
        default: true
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format v1.0.0"
            exit 1
          fi
      
      - name: Check if tag exists
        run: |
          if git rev-parse "${{ inputs.version }}" >/dev/null 2>&1; then
            echo "Error: Tag ${{ inputs.version }} already exists"
            exit 1
          fi
      
      - name: Generate release notes
        id: release_notes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LATEST_TAG" ]; then
            # Generate changelog since last tag
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            # First release
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed
          
          ${CHANGELOG}
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...${{ inputs.version }}
          EOF
          
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT
      
      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ inputs.version }}" -m "Release ${{ inputs.version }}"
          git push origin "${{ inputs.version }}"
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.version }}
          release_name: ${{ inputs.version }}
          body_path: ${{ steps.release_notes.outputs.notes_file }}
          draft: false
          prerelease: ${{ inputs.prerelease }}
      
      - name: Update major version tag
        if: inputs.update_major == true
        run: |
          # Extract major version (e.g., v1 from v1.2.3)
          MAJOR_VERSION=$(echo "${{ inputs.version }}" | cut -d. -f1)
          
          # Delete existing major tag if it exists
          if git rev-parse "$MAJOR_VERSION" >/dev/null 2>&1; then
            git tag -d "$MAJOR_VERSION"
            git push origin ":refs/tags/$MAJOR_VERSION"
          fi
          
          # Create new major tag
          git tag -a "$MAJOR_VERSION" -m "Release $MAJOR_VERSION (latest: ${{ inputs.version }})"
          git push origin "$MAJOR_VERSION"
      
      - name: Cleanup
        if: always()
        run: |
          rm -f release_notes.md